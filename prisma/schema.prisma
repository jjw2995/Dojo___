// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// model {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Bistro {
  id         String       @id @default(cuid())
  placeId    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  address    String?
  tipForms   TipForm[]
  BistroUser BistroUser[]
  Position   Position[]

  @@unique([placeId])
}

enum Authority {
  MODERATOR
  USER
}

model BistroUser {
  id        String    @id @default(cuid())
  bistroId  String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bistro    Bistro    @relation(fields: [bistroId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  authority Authority

  tipContribution TipContribution[]
  positions       Position[]

  @@unique([bistroId, userId])
}

// tip template for daily-tip-total
model TipForm {
  id       String @id @default(cuid())
  bistroId String

  bistro  Bistro @relation(fields: [bistroId], references: [id])
  formula Json
  // {
  // equation: {}
  // variables: {q12d: "hallTip", 1qwe2: "togoTip"}
  // }
  // version control split by date
  // ex. {
  // 2023-01-01 : {1rfa3: {name: server, ratio: 60}, 1qras3: {name: cook, ratio: 40}},
  // } etc.
  Tip     Tip[]
}

// daily-tip-total
model Tip {
  id        String @id @default(cuid())
  tipFormId String

  date    DateTime @db.Time
  tipForm TipForm  @relation(fields: [tipFormId], references: [id])

  @@unique([date, tipFormId])
}

model Position {
  id              String            @id @default(cuid())
  bistroUserId    String?
  bistroId        String
  name            String
  tipPercent      Json 
  // {2023-01-02: 60}
  bistro          Bistro            @relation(fields: [bistroId], references: [id])
  BistroUser      BistroUser?       @relation(fields: [bistroUserId], references: [id])
  TipContribution TipContribution[]
}

// tip distrubution within position
model TipContribution {
  id           String     @id @default(cuid())
  bistroUserId String
  positionId   String
  date         DateTime   @db.Date
  bistroUser   BistroUser @relation(fields: [bistroUserId], references: [id])
  percent      Int        @default(100) @db.UnsignedTinyInt
  position     Position   @relation(fields: [positionId], references: [id])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  BistroUser    BistroUser[]
}

// ====================================================
// ============= set up related below =================
// ====================================================

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
