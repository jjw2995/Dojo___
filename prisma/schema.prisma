// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// model {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model Example {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Bistro {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  address    String?
  placeId    String
  tipForms   TipForm[]
  BistroUser BistroUser[]
}

model BistroUser {
  id        String   @id @default(cuid())
  bistroId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bistro    Bistro   @relation(fields: [bistroId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  // authority enum[super, manager, user]
  Tip       Tip[]

  roles Role[]
  // Role      Role[]    @relation(fields: [], references: [name])

  @@unique([bistroId, userId])
}

model TipForm {
  id        String   @id @default(cuid())
  bistroId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // bistro Bistro @relation(fields: [])

  bistro Bistro? @relation(fields: [bistroId], references: [id])
  Tip    Tip[]
}

model Tip {
  // id           String     @id @default(cuid())
  tipFormId    String
  bistroUserId String
  updatedAt    DateTime   @updatedAt
  // updatedBy 
  date         DateTime   @db.Time
  tipForm      TipForm    @relation(fields: [tipFormId], references: [id])
  bistroUser   BistroUser @relation(fields: [bistroUserId], references: [id])

  @@unique([date, tipFormId, bistroUserId])
}

model Role {
  name         String      @id @unique
  BistroUser   BistroUser? @relation(fields: [bistroUserId], references: [id])
  bistroUserId String?
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  BistroUser    BistroUser[]
}

// ====================================================
// ============= set up related below =================
// ====================================================

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
