// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Bistro {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  tipForms   TipForm[]
  bistroUser BistroUser[]
  positions  Position[]

  osm_id           String?
  osm_type         String?
  osm_display_name String?
  osm_lat          Float?
  osm_lon          Float?

  amenity      String?
  house_number String?
  road         String?
  suburb       String?
  city         String?
  state        String?
  country      String?

  PendingJoin PendingJoin[]

  @@unique([name])
  @@index([osm_type, osm_id])
  @@fulltext([name])
}

model PendingJoin {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  bistro    Bistro   @relation(fields: [bistroId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  bistroId String
  userId   String

  @@unique([bistroId, userId])
}

enum Authority {
  MODERATOR
  USER
}

// tip template for daily-tip-total
model TipForm {
  id       String @id @default(cuid())
  bistroId String

  bistro  Bistro @relation(fields: [bistroId], references: [id])
  formula Json   @default(dbgenerated())
  // {
  // equation: {}
  // variables: {q12d: "hallTip", 1qwe2: "togoTip"}
  // }
  tips    Tip[]
}

// daily-tip-total
model Tip {
  id        String @id @unique @default(cuid())
  name      String
  tipFormId String

  date         DateTime @db.Time
  total        Decimal  @db.Decimal(10, 2)
  // maybe: add latex formated equation
  flatEquation String
  // flatVar
  tipForm      TipForm  @relation(fields: [tipFormId], references: [id])

  // @@unique([date, name])
}

model BistroUser {
  id        String    @id @default(cuid())
  bistroId  String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bistro    Bistro    @relation(fields: [bistroId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  authority Authority @default(USER)

  bistroUserPositions BistroUserPosition[]

  @@unique([bistroId, userId])
}

model BistroUserPosition {
  id         String     @id @default(cuid())
  bistroUser BistroUser @relation(fields: [bistroUserId], references: [id])
  position   Position   @relation(fields: [positionId], references: [id])
  tipPercent Int        @default(0) @db.UnsignedTinyInt

  bistroUserId    String
  positionId      String
  TipContribution TipContribution[]

  @@unique([bistroUserId, positionId])
}

model Position {
  id                  String               @id @default(cuid())
  bistroId            String
  name                String
  positionTipPercent  Int                  @default(0) @db.UnsignedTinyInt
  hourlyRate          Float
  bistro              Bistro               @relation(fields: [bistroId], references: [id])
  bistroUserPositions BistroUserPosition[]

  @@unique([name, bistroId])
}

// tip distrubution within position
model TipContribution {
  id                   String             @id @default(cuid())
  date                 DateTime           @db.Date
  tipPercent           Int                @default(0) @db.UnsignedTinyInt
  positionTipPercent   Int                @default(0) @db.UnsignedTinyInt
  hours                Decimal            @db.Decimal(4, 2)
  bistroUserPosition   BistroUserPosition @relation(fields: [bistroUserPositionId], references: [id])
  bistroUserPositionId String
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bistroUser    BistroUser[]
  PendingJoin   PendingJoin[]
}

// ====================================================
// ============= set up related below =================
// ====================================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "orderByNulls"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
